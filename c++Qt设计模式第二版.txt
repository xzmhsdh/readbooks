编程风格:
(1).类名称大写字母开头
(2).函数名称以小写字母开头
(3).常量大写，尽可能在类作用域创建枚举值,全局常量和宏大写
(4).类名称应当是一个名词或名词短语
(5).每个函数名称是一个动词或动词短语
(6).if语句，每一个布尔变量应当近似于一个句子:bool isQualified;
(7).数据成员:m_Color,m_Width
(8).静态数据成员:s_Singleton,s_ObjCount。
(9).属性的获取器/设置器
    非布尔型获取器:color() /getColor()。
	布尔型获取器:isChecked() / isValid()。
	设置器: setColor(const Color& newColor)。
	
===========================================================================

c++基础知识点
===========================================================================
1.ostringstream 转 string
  eg:
     ostringstream strbuf;
	 strbuf << "Luckynumber:" << lucky << endl << "pi:" << pi << endl;
	 string strva = strbuf.str();
2.const char * 转 QString
  eg:
     const char *charstr = "this is one...";
     QString str = charstr;
	 
3.std::auto_prt,shared_ptr,QPointer


4.volatile可理解为const的反义,用它标记的对象在任何时候都可以被修改,对编译器
  一个提示:访问它时不进行优化。
  eg:volatile char * vcharptr; //将常规指针声明成volatile内存
     char * volatile vptrchar; //将volatile指针声明成常规内存

5.使用友元的目的:
  1).为了使用工厂方法，需对某个类强制实施某些创建规则.
  2).为了使用全局运算符函数，如operator<<()和operator>>()，此时不希望将运算符
     作为某个类的成员函数，或者没有写入(write-access)类定义的权利.
    eg: friend ostream& operator<<(ostream& os,const Timer& obj);

6.static关键字
  1).static局部变量:首次创建并初始化，程序终止销毁  
  2).static类成员:不会影响对象调用sizeof获得的类对象的大小 
     eg:
	 class Thing{ 
		public:
		 static int showCount(); 
	    private:
		 static int s_Count; //将变量的作用域由全局作用域变成文件作用域
	 };
	 //.cpp
	 int Thing::s_Count = 0; //static成员在类定义之外的文件中被初始化,例外:static const int,其在类定义中被初始化
	 int Thing::showCount(){ return s_Count;}
  3).不在代码块或函数内的static对象，在其相应的对象模块首次加载时会进行初始化，大部分情况在
     启动之后，main()函数运行之前，所以不要使初始化工作依赖于另一个文件中的初始值.
	 
7.类具有指针成员或对象成员时，需要同时编写这个类的复制构造函数和复制赋值构造函数。	
  转换构造函数(只用一个不同类型的实参就可以调用的构造函数):ClassA::ClassA(const ClassB& bObj);
  explicit阻止编译器为了隐式转换而自动使用此转换构造函数。建议对QWidget派生的类使用explicit

8.void Too::foo() const; //非成员函数有一个隐式参数this，指向主对象的指针.声明const则修饰this是一个指向const的指针
  编译器翻译的代码==>_Too_foo_const(const Too* this);
  mutable修饰的Too成员变量，可以在foo()const中被修改其他未被修饰的成员变量则仍然不可修改.

9.(具有多态性的派生(多态函数))this在类的构造函数被初始化，在析构函数被销毁。所以 构造函数和析构函数中不能调用virtual方法. 
  类中包含virtual函数，析构也应该声明为virtual，通常是通过基类指针删除多态对象，导致对析构的间接调用，若不为virutal
  类型，则由编译时绑定调用哪个析构函数，导致派生对象的不完整析构。基类析构声明为virtual，销毁时通过基类指针访问派生对象时，
  会调用合适的派生类析构函数。

10.(抽象基类的派生(多态对象))抽象基类是无法或者不适合实例化的类:1).至少具有一个纯virtual函数 2).没有public构造函数  
  
11.重载、隐藏、重写
   1).重载: foo()具有不同的函数签名
   2).重写: 派生类具有和基类virutal函数相同的函数签名和返回类型
   3).隐藏: 派生类中的成员函数会隐藏基类中与之同名的全部函数。只有派生类函数可以被直接调用，
            基类函数只能显示地用::调用,eg: childobj.BaseClass::hidefunction();

12.	返回指针的成员函数一般声明为private类型.		
    eg:
	class Library:public QList<RefItem*>{
		public:
		  Library(){}
		  ~Library(); //指针容器必须有析构函数
		  QString toString(QString sep="\n")const;
		private:
		  Library(const Library&);
		  Library& operator=(const Library&);
		  RefItem* findRefItem(QString isbn); //不让客户代码操作指针
	};
	Library::~Library(){
		qDeleteAll(*this);
		clear();
	}
	//复制构造和复制赋值运算符从来不会使用，这里提供实现仅仅防止编译器提示警告
	Library::Library(const Library&):QList<RefItem*>(){} //防止没有在构造函数中初始化基类的警告
	Library& operator=(const Library&){return *this;}    //防止赋值运算符没有任何返回值的警告
	RefItem* Library::findRefItem(QString isbn){
		for (int i = 0; i < size(); ++i){ //没调用foreach()宏是因为宏需要复制它所遍历的容器，由于复制构造函数为private,所以只能for
			if (at(i)->getISBN().trimmed() == isbn.trimmed()) return at(i);
		}
	}
	QString Library::toString(QString sep) const {
		QStringList reflst;
		for (int i = 0; i < size(); ++i) //没调用foreach()宏是因为宏需要复制它所遍历的容器，由于复制构造函数为private,所以只能for
			 reflst << at(i)->toString();
		return reflst.join(sep);
	}
	
13.类型转换问题	
   eg:
      enum Types{BOOK,REFERENCEBOOK,TEXTBOOK,DVD,FILM,DATADVD};
	  const QStringList TYPES=(QStringList() << "BOOK" << "REFERENCEBOOK"
	    <<"TEXTBOOK" << "DVD" << "FILM" << "DATADVD");
		
	  void add(Library &lib,QStringList objdata){
		QString type = objdata.first();
		switch(static_cast<Types>(TYPES.indexOf(type))){
		   case BOOK:
		   ...
		}
	  }
 
 
Qt知识点
=================================================================================================================
1.Qt核心模块:core,gui,xml,sql,phonon,webkit
除了core和gui，其他模块都需要在qmake的工程文件中启用:
QT += xml
QT -= gui
QT += sql

2.托管容器:组合类型，容器会管理它所指向的对象。组合关系被销毁时，会完整地销毁自身.
  聚合容器:只对内容提供索引或导航机制的容器。不管理它的对象，只提供访问对象的便利途径,复制聚合容器只复制对象的引用，
		   删除聚合容器，只移除对象的引用，容器底层对象不受影响.
  
3.QObject支持普通c++对象通常没有的特性:
  1).信号和槽
  2).元对象，元属性，元方法
  3).qobject_cast
  
  
  
=================================================================================================================
1.qDebug()
  1).qDebug() << "Here is a debug";
  2).qDebug("Here is one with the number %d in it.",num1);
  
2.QStringList迭代
  eg:
  #include <QStringList>
  #include <QDebug>
  int main(){
	QString winter = "December,January,February";
	QString sprint = "March,April,May";
	QString summer = "June,July,August";
	QString fall = "September,October,November";
	
	QStringList list;
	list << winter;
	list += spring;
	list.append(summer);
	list << fall;
	
	qDebug() <<"The Spring months are:" << list[1];
	QString allmonths = list.join(",");
	qDebug() << allmonths;
	
	QString list2 = allmonths.split(",");
	Q_ASSERT(list2.size() == 12);
	foreach(const QString& str,list){ //Qt foreach循环
	  qDebug() << QString(" [%1] ").arg(str);
	}
	for (QStringList::iterator it = list.begin(); //STL风格迭代
		  it != list.end();++it){
		QString current = *it;
		qDebug() << "[[" << current << "]]";
	}
	QListIterator<QString> itr(list2); //Java1.2风格迭代器
	while (itr.hasNext()){
		QString current = itr.next();
		qDebug() << "{" << current << "}";
	}
	return 0;
  }
  
3.QDir、QFileInfo、QDirIterator
  eg:
  void recurseAddDir(QDir d,bool recursive=true,bool symlinks= false){
	d.setSorting(QDir::Name);
	QDir::Filters  df = QDir::Files | QDir::NoDotAndDotDot;
	if (recursive) df |= Dir::Dirs;
	if (!symlinks) df |= Dir::NoSymLinks;
	QStringList qsl = d.entryList(df,QDir::Name|QDir::DirFirst);
	
	foreach(const QString &entry,qsl){
		QFileInfo finfo(d,entry);
		for (finfo.isDir()){
		  QDir sd(finfo.absoluteFilePath());
		  recurseAddDir(sd);
		} else {
		  if (finfo.completeSuffix() == "map3")
		     addMp3File(finfo.absoluteFilePath());
		}
	}
  }
4. 重载QList的<<操作符
eg1:
  //.h
  class Account;
  class Bank{
	public:
	  Bank& operator<<(Account* acct);
	  ~Bank();
	private:
	   QList<Account*> m_Accounts;
  };
  //.cpp
  Bank::~Bank(){
	qDeleteAll(m_Accounts);//<==>qDeleteAll(m_Accounts.begin(),m_Accounts.end()); 对容器中的每一个元素调用delete
	m_Accounts.clear();
  }
  Bank& Bank::operator<<(Account* acct){
	m_Accounts << acct;
	return *this;
  }
eg2:
 #include <QList>
 #include <QtAlgorithms>
 #include <QStringList>
 #include <QDebug>
 
 class CaseIgnoreString:public QString{
	public:
	 CaseIgnoreString(const QString &other= QString()):QString(other){}
	 bool operator<(const QString &other) const{
		return toLower() < other.toLower();
	 }
	 bool operator==(const QString &other)const {
		return toLower == other.toLower();
	 }
 };
 int main(){
	CaseIgnoreString s1("Apple"),s2("bear"),s3("CaT"),s4("dog"),s5("Dog");
	Q_ASSERT(s4 == s5);
	Q_ASSERT(s2 < s3);
	Q_ASSERT(s3 < s4);
	QList<CaseIgnoreString> namelist;
	namelist << s5 << s1 << s3 << s4 << s2;
	qSort(namelist.begin(),namelist.end());
	int i = 0;
	foreach(const QString &striter,namelist){
		qDebug() << QString("namelist[%1] = %2").arg(i++).arg(striter);
	}
	QStringList strlist;
	strlist << s5 <<s1 << s3 << s4 << s2;
	qSort(strlist.begin(),strlist.end());
	qDebug() << "StringList sorted:"+strlist.join(",");
	return 0;
 }

  
  
5.QOjbect
  1).QObject之间基于信号和槽通信,使用QApplication和Qt的事件循环实现了基于事件编程的能力.
  2).QObject没有公有的复制构造和复制赋值函数，不能被复制，也不能通过值传递的方式向函数传递QObject对象.
  3).每个QObject父对象都会管理自己的子对象，调用QOjbect的析构函数会自动销毁该对象的所有子对象。QObject首先会
     调用自己每个子对象的析构函数，每个子对象再调用自己每个子对象的析构函数(递归).
  4).重父化:objA->setParent(objB); objA->setParent(objC);
  5).QOjbect子对象存储在QObjectList中,返回一个指向主对象中全部子对象的指针列表:
     const QObjectList& QObject::children() const;
	 查找子对象:QList<T> parentObj.findChildren<T>(const QString& name = QString())const;
	 eg:
	   QList<Customer*> custlist = parent.findChildren<Customer*>();
	   foreach(const Customer* current,custlist){
			qDebug << current->toString();
	   }
	   
  6).Q_OBJECT宏必须出现在每个QObject派生类定义的头文件中，以便让moc知道要为其生成代码
     若先定义了QObject的派生类，构建了应用程序，后才添加Q_OBJECT宏，需使用qmake更新
	 Makefile文件，执行clean rebuild不能修复此问题.
  7).信号和槽的连接语句:
     bool QObject::connect(senderQObjectPtr,SIGNAL(signalName(argumentList)),
						   receiverQObjectPointer,SLOT(slotName(argumentList)),
						   optionalConnectionType); //最后参数:设置从发射点处同步(阻塞)或非同步(排队)地调用目标槽
     如果多个信号连接到同一个槽上且需要知道是哪一个QObject发射的信号，可在该槽中调用sender()返回指向那个对象的指针
  8).QObject的生命周期
     1).每个QObject在QApplication之后创建，在QApplication销毁前销毁。静态存储区创建的对象将在main()返回之后才被销毁
	    所以不应该定义静态存储类的QObject.
	 2).一般情况，无父对象的QObject应当在栈上创建或定义成另一个类的子对象。有父对象的QObject在堆上创建或由其他对象进行
	    管理。有父对象的在栈上创建可能会被删除两次。
     3).不推荐直接删除QObject,在有事件循环的程序中，最好是利用QObject::deleteLater()来删除QObject,可在应用程序处理事件
	    并在当槽返回之后安排对象的销毁.
	 
	 
6. 带有公有默认构造函数，复制构造，赋值运算符的任何类型都是值类型的。
   让Qt完成引用计数和内存管理：不在堆区创建QList,QString,QHash,QImage,QVariant对象。

7.QTestLib编写的测试代码组织在一个基于单元的框架内。  
  eg: CONFIG += qtestlib
  #include <QtTest>
  class TestAssertEquals:public QObject{
	Q_OBJECT
	private slots:
	  void test();
  };
  void TestAssertEquals::test(){
	qDebug() << "Testing bools";
	bool boolvalue = true;
	QVERIFY(1);
	QVERIFY(true);
	qDebug() << QString("We are in file:%1 Line:%2").arg(__FILE__).arg(__LINE__);
  }  
  
8.窗体布局
  分隔addSpacing(int size)、伸展addStretch(int stretch)、支撑addStrut(int size)
eg1:
  m_name = new QLineEdit;
  m_birthday = new QDateEdit;
  m_birthday->setDisplayFormat("dd/MM/yyyy");
  m_colorButton = new QPushButton(tr("Choose"));
  m_colorButton->setAutoFillBackground(true);
  m_buttons = new QDialogButtonBox(QDialogButtonBox::Ok|QDialogButtonBox::Cancel);
  QVBoxLayout *vbox = new QVBoxLayout;
  QFormLayout *layout = new QFormLayout;
  
  layout->addRow(tr("Name"),m_name);
  layout->addRow(tr("Birthdate"),m_birthday);
  layout->addRow(tr("Favorite Color"),m_colorButton);
  
  vbox->addLayout(layout);
  vbox->addWidget(m_buttons);
  
  Q_ASSERT(vbox->parent() == 0);
  Q_ASSERT(m_birthday->parent() == 0);
  setLayout(vbox); //自动设置自己和子布局中的QWidget父对象为vbox的父对象
  Q_ASSERT(vbox->parent() == this);
  Q_ASSERT(m_birthday->parent() == this);
eg2:
  CardTable::CardTable(QWidget* parent):QWidget(parent)
  {
	QHBoxLayout* row = new QHBoxLayout();
	row->addWidget(new Card("ah"));
	row->addWidget(new Card("qd"));
	row->addWidget(new Card("ks"));
	row->addWidget(new Card("8c"));
	QVBoxLayout* rows = new QVBoxLayout(); //行
	rows->addLayout(row);
	row = new QHBoxLayout();
	row->addWidget(new Card("qs"));
	row->addWidget(new Card("js"));
	row->addWidget(new Card("td"));
	rows->addLayout(row);
	QVBoxLayout* buttons = new QVBoxLayout();
	buttons->addWidget(new QPushButton("Deal"));
	buttons->addWidget(new QPushButton("Shuffle"));
	QHBoxLayout* cols = new QHBoxLayout(); //列
	setLayout(cols);
	cols->addLayout(rows);
	cols->addLayout(buttons);
  }
  
9.Qt处理图片的类  
  1).QImage:用于离屏(off-screen)操作，输入输出操作，可直接访问像素 
  2).QPixmap:用于在屏幕上进行绘制并优化，仅在主线程
  3).QIcon:用于视频内存的缓存，主线程
  4).QPicture:存储绘制的操作而不是实际的位图图片。在使用QPainter的begin()方法，指定在QPicture上绘图
     在end()方法结束绘图，调用QPicture的save()将QPainter的绘图指令存至档案。重播绘图指令调用QPicture
	 的load()方法在指定的绘图装置上绘制QPicture.

10.QTimer
   QTimer::singleShot():在给定的时间间隔后调用一次槽，若倒数间隔设置为0，QTimer会在事件队列中的全部事件
   处理完后就立刻发出timeout()信号.   
	 
11.绘制事件和画图
   QPaintEvent被发送到QWidget上的情况:
   1).窗口由隐藏变为显示
   2).窗件改变了大小或进行重新排布
   3).调用了update()(异步)或repaint()(同步)
   eg:
   void LifeWidget::paintEvent(QPaintEvent* evt){
	  QPainter painter(this); //1.创建一个QPainter
	  if (!m_image.isNull())
	    painter.drawImage(QPoint(0,0),m_image); //2.调用QPainter的API在QWidget上进行绘制
   } 

12.QAction
  1).eg:
     QMenu* menu = new QMenu(tr("&Questions"),this);
     QMainWindow::menuBar()->addMenu(menu);
     menu->addAction(tr("&Ask question"),this,SLOT(askQuestion()),tr("ALT+A"));
	 menu->addAction(tr("A&sk a question"),this,SLOT(askAQuestion()),tr("ALT+D"));
     每次调用QMenu::addAction(text,target,slot,shortchut)函数，都会创建一个未命名的QAction
	 并添加到此QMenu上，然后调用它的基类函数QWidget::addAction(QAction*),这样将新建的QAction添加到
	 用于上下文菜单的QMenu的QAction清单中
  2).QAction、QToolbar、QActionGroup(Lookup Page 235)

13.QSettings (Lookup Page 242) Monostate模式的一种实现。
14.剪贴板和数据传输操作(Lookup Page 244)









=================================================================================================================
设计模式

1.序列化器模式
  eg: QDataStream,QTextStream
    class METADATAEXPORT MetaDataValue{
	 public:
	  friend METADATAEXPORT QTextStream& operator<< (QTextStream& os,
							const MetaDataValue& mdv);
	  friend METADATAEXPORT QTextStream& operator>> (QTextStream& is,
							const MetaDataValue& mdv);
	  friend METADATAEXPORT QDataStream& operator<< (QDataStream& os,
							const MetaDataValue& mdv);
	  friend METADATAEXPORT QDataStream& operator>> (QDataStream& is,
							const MetaDataValue& mdv);
	  friend METADATAEXPORT	bool operator==(const MetaDataValue&,const MetaDataValue&);
   };
   QTextStream& operator<< (QTextStream& os,const MetaDataValue& mdv) //将数据插入到流中
   {
	  QStringList sl;
	  sl << mdv.url.toString() << mdv.trackTitle() << mdv.artist();
	  os << s1.join("\t") << "\n";
	  return os;
   }
   QTextStream& operator>> (QTextStream& is,const MetaDataValue& mdv) //从输入流中提取数据
   {
	  QString line = is.readLine();
	  QStringList fields = line.split("\t");
	  while (fields.size() < 9){
		fields << "";
	  }
	  mdv.m_isNull = false;
	  mdv.setUrl(QUrl::fromUserInput(fields[0]));
	  mdv.setTrackTitle(fields[1]);
	  ...
	  return is;
   }
   QDataStream& operator<< (QDataStream& os,const MetaDataValue& mdv)
   {
	  os << mdv.m_Url << mdv.trackTitle() << mdv.artist();
	  return os;
   }
   QDataStream& operator>> (QDataStream& is,const MetaDataValue& mdv)
   {
      is >> mdv.m_Url >> mdv.m_TrackTitle; 
	  mdv.m_isNull = false;
	  return is;
   }
   void test()
   {
	  QFile textFile("playlist1.tsv");
	  QFile binaryFile("playlist1.bin");
	  QTextStream textStream;
	  QDataStream dataStream;
	  
	  if (textFile.open(QIODevice::ReadOnly)){
		 textStream.setDevice(&textFile);
	  }
	  if (binaryFile.open(QIODevice::WriteOnly)){
		 dataStream.setDevice(&binaryFile);
	  }
	  QList<MetaDataValue> values;
	  while (!textStream.atEnd()){
		 MetaDataValue mdv;
		 textStream >> mdv; //从流中提取一条mdv数据
		 values << mdv;     //将数据插入到QList中
		 dataStream << mdv; //将数据写入到dataStream中
	  }
	  textFile.close();
	  binaryFile.close();
	  textFile.setFileName("playlist2.tsv");//更改打开文件,NoUse
	  if (binaryFile.open(QIODevice::ReadOnly)){
		dataStream.setDevice(&binaryFile);
		for (int i = 0; i < values.size(); ++i;){
			MetaDataValue mdv;
			dataStream >> mdv;
			QCOMPARE(mdv,values[i]); //比较数据是否相等
		}
	  }
   }
   
2.Qt中的观察者模式(Observer pattern):信号和槽  
  当任意数据模型对象发生状态改变时，需要一种间接的方式来提醒观察者，
  观察者是一些正在监听并响应状态变化事件的对象。使用这种消息传递机制
  的设计模式称为观察者模式或发布-订阅模式 
  共同特征:1).允许实体观察者类和实体主体类之间解耦
		   2).支持广播风格(一对多)的通信
		   3).所采用的从主体向观察者发送信息得机制完全由主体的基类给定
  
3.命令模式
  Qt实现命令模式:
  1).创建一些命令并在适当的容器内对它们进行排队
  2).把QUndoCommand放到QUndoStack上即可得到执行
  3).若需同时执行各个命令，可从QRunnable派生它们，使用QtConcurrent::Run()在线程池中对它们进行调度.
  4).或许会把一些命令序列化到文件并在随后再次对它们进行调用，以用来实现批处理或分布式执行。
  eg:图片像素操作
  void AdjustColors::adjust(dobule radj,dobule gadj,dobule badj)
  {
	int h(m_Image.height()),w(m_Image.width());
	int r,g,b;
	QRgb oldpix,newpix;
	m_Saved = m_Image.copy(QRect());
	for(int y = 0; y < h;++y){
		for(int x = 0;x < w; ++x){
			oldpix = m_Image.pixel(x,y);
			r = qRed(oldpix)*radj;
			g = qGreen(oldpix)*gadj;
			b = qBlue(oldpix)*badj;
			newpix = qRgb(r,g,b);
			m_Image.setPixel(x,y,newpix);
		}
	}
  }
  void AdjustColors::redo(){
	qDebug() << "AdjustColors::redo()";
	adjust(m_RedAdj,m_GreenAdj,m_BlueAdj);
  }
  void AdjustColors::undo(){
	qDebug() << "AdjustColors::undo()";
	m_Image = m_Saved.copy(QRect());
  }
  
  
4.元对象模式(反射模式)
  元对象:描述另一个对象结构的对象。
  1).moc 元对象编译器:为拥有元对象的类提供反射机制。  
  2).派生自QObject的类都会拥有一个由moc为其生成的QMetaObject,通过
     QMetaObject* QObject::metaObject() const 来获取该对象的QMetaObject
	 的指针。
	 metaObj->className(); //类名称:const char*的格式返回
	 metaObj->superClass();//返回基类的QMetaObject,若不存在返回0
	 
  3).可通过使用QMetaObject和QMetaProperty编写足够通用的代码来处理所有具有自我
	 描述能力的类。

  4).运行时类型识别:RTTI
     c++: dynamic_cast、typeid
     qt : qobject_cast、 Object::inherits()
	 qobject_cast:参数类型受限于ObjectType*，但比dynamic_cast快5到10倍,用于非
	 QObject的基类时,需把每个基类都放到Q_INTERFACES(BASECLASS1 BASECLASS2)，
	 并放到类定义的Q_OBJECT宏的后面.
	 inherits: 
     eg:
	 if (widget->inherits("QAbstractSlider")) cout << "Yes,it is";
	 if (widget->inherits("QListView")) cout << "Yes,it is";

  5).反射方法objToString()对任何定义了Qt属性的类进行操作,对所有的property()索引值进行迭代
     QString objToString(const QObject* obj)
	 {
		QStringList result;
		const QMetaObject *meta = obj->metaObject();
		result += QString("class %1 : public %2 {").
		   arg(meta->className()).arg(meta->superClass->className());
		for (int i = 0;i < meta->propertyCount(); ++i)
		{
			const QMetaProperty qmp = meta->property(i);
			QVariant value = obj->property(qmp.name());
			if (value.canConvert(QVariant::String))
			{
				result += QString("  %1  %2 = %3;").
				arg(qmp.typeName()).arg(qmp.name()).arg(value.toString());
			}
		}
		result += "};";
		return result.join("\n");
	 }
	 
   6).动态属性
      Q_PROPERTY
	  QMetaObject无法知道动态属性，可用QObject::dynamicPropertyNames()返回的QList清单中的名称进行遍历
	  并用QObject::property()获得其值.
	  eg:
	  QString DynoProps:propsInventory()
	  {
		static const QMetaObject* meta = metaObject();
		QStringList res;
		res << "Fixed Properties:";
		QString propData;
		for (int i = 0; i < meta->propertyCount(); ++i){
			res << QString("%1\t%2").arg(QString(meta->property(i).name()))
			.arg(meta->property(i).read(this).toString());	
		}
		res << "Dynamic Properties:";
		foreach(QByteArray dpname,dynamicPropertyNames()){
			res << QString("%1\t%2").arg(QString(dpname))
			.arg(property(dpname).toString());
		}
		return res.join("\n");
	  }
	  
	7).元类型声明和注册
	 使用Q_ENUMS宏，可在QVariant系统中加入一些自定义的枚举类型或者使用Q_DECLARE_METATYPE(MyType),
	 如果 MyType有公共的默认复制构造和公共的复制构造函数及公共的析构函数,Q_DECLARE_METATYPE宏
	 可使得MyType作为QVariant中的自定义类型。
	 eg:
	 //.h
	 class Fraction:public QPair<qint32,qint32>
	 {
		public:
		  Fraction(qint32 n = 0,qint32 d = 1):QPair<qint32,qint32>(n,d)
		  {}
	 };
	 Q_DECLARE_METATYPE(Fraction);
	 
5.模型和视图
  	工厂方法，委托及创建和销毁都属于控制器范畴，控制器代码管理在事件，模型和视图之间的相互交互。
  1).模型中存储供显示和操作(如排序，编辑，保存，获取，转换等)的具体数据。通过信号和槽，它们将
  数据的变化通知给所有相关连的视图。每个视图对象都有一个指向模型对象的指针，视图对象会频繁访问
  模型的方法以获取或设置数据。
  2).模型索引: 若使用一个在若干指令操作前已经存在的QModelIndex,应该先调用QModelIndex::isValid()
     QPresistentModelIndex对象具有更长的生命周期，但在使用前仍应该先调用isValid()方法来进行检查。
	
	Qt模型-视图eg:
	int main(int argc,char *argv[])
	{
	   QApplication app(argc,argv);
	   QFileSystemModel model;
	   model.setRootPath("/");
	   QTreeView tree;
	   tree.setModel(&model);
	   tree.setSortingEnabled(true); //使表头的排序按钮可用
	   tree.header()->setResizeMode(QHeaderView::ResizeToContents);
	   tree.resize(640,480);
	   tree.show();
	   return app.exec();
	}
	
  3).多个视图，同一个模型
    QStandardItemModel* createModel(QObject *parent,int rows,int cols,int childNodes)
	{
		QStandardItemModel *model = new QStandardItemModel(rows,cols,parent);
		for (int r = 0; i < rows; ++r){
		  for (int c = 0; c < cols; ++c){
		     QStandardItem *item = new QStandardItem(
			  QString("Row:%0,Column:%1").arg(r).arg(c));
		   if (c == 0){
		     for (int i = 0; i < childNodes; ++i){
			   QStandardItem *child = new QStandardItem(QString("Item %0").arg(i));
			   item->appendRow( child );
			 }
			model->setItem(r,c,item);
		   }
		  }
		}
		model->setHorizontalHeaderItem(0,new QStandardItem("Name"));
		model->setHorizontalHeaderItem(1,new QStandardItem("Value"));
		return model;
	}
	int main(int argc,char** argv)
	{
		QApplication app(argc,argv);
		QStandardItemModel *model = createModel(&app);
		
		QListView list;
		QTableView table;
		QTreeView  tree;
		QColumnView columnView;
		
		list.setModel( model );
		tabel.setModel( model );
		tree.setModel( model );
		columnView.setModel( model );
	}
  4).在选择Accepted后如何保存快捷键到QSettings对象中  
	 void ActionTableEditor::accept()
	 {
		QSettings s;
		s.beginGroup("shortcur");
		foreach(QAction* act,m_changedActions)
		{
			s.setValue(act->text(),act->shorcut());
		}
		s.endGroup();
		QDialog::accept();
	 }
  5).排序和过滤:5行代码就可以为一个已经存在的模型增加排序/过滤功能
     void ActionTableEditor::setupSortFilter()
	 {
		m_sortFilterProxy = new QSortFilterProxyModel(this);
		m_sortFilterProxy->setSourceModel(m_model); //设置SortFilterProxy的源模型为ActionTableModel
		m_ui->m_tableView->setModel(m_sortFilterProxy); //设置表格视图为代理模型
		m_sortFilterProxy->setFilterKeyColumn(-1);  //所有数据列启用过滤
	 }	 
	 //m_filterField_textChanged是一个自动连接的槽,当QLineEdit对象filterField的textChangedz信号发射时会被调用
	 void ActionTableEditor::on_m_filterField_textChanged(const QString &newText) //自动连接的槽
     {
		m_sortFilterProxy->setFilterFixedString(newText); //修改过滤字符串
	 }
  6).智能指针
     QScopedPointer是一个在指针作用域结束后自动删除所引用对象的智能指针,类似std::auto_ptr，复制QScopedPointer是无意义的,
	 它会导致所引用的对象重复删除.
 	 QSharedPointer是一个自动删除它所引用的对象的智能指针,但它允许被复制，QSharedPointer会保持一个引用计数，共享的堆对象
	 只有在最后一个指向它的智能指针销毁时才会被删除。
	 eg:
	 class DOBJS_EXPORT DataObjectTableModel: public QAbstractTableModel{
		Q_OBJECT
		public:
		  explicit DataObjectTableModel(DataObject* headerModel = 0,Object *parent = 0);
		  virtual bool insertRecord(QSharedPointer<DataObject> newRecord,int position=-1,
					const QModelIndex& = QModelIndex());
		  QStringList toStringList() const;
		  QString toString() const;
		public slots:
		  void clear();
		  void rowChanged(const QString& filename);
		protected:
		  QList<QSharedPointer<DataObject> > m_Data;
		  QList<bool>  m_isEditable;
		  QStringList  m_Headers;
		  DataObject*  m_Original;
		  void extractHeaders(DataObject* hmodel);
		public:
		  DataObjectTableModel& operator<<(QSharedPointer<DataObject> newObj)
		  {
			insertRecord(newObj);
			return *this;
		  }
	 };
	 QVariant DataObjectTableModel::data(const QModelIndex& index,int role) const
	 {
		if (!index.isValid())
			return QVariant();
		int row(index.row()),col(index.column());
		if (row >= rowCount()) return QVariant();
		QSharedPointer<DataObject> lineItem(m_Data.at(row));
		if (lineItem.isNull)){
			qDebug() << "lineitem=0:" << index;
			return QVariant();
		}
		if (role == Qt::UserRole || role == Qt::ToolTipRole)
			return lineItem->objectName();
		else if (role == DisplayRole || role == EditRole)
			return lineItem->property(m_Headers.at(col));
		else 
			return QVariant();
	 }
	 bool DataObjectTableModel::setData(const QModelIndex& index,
				const QVariant& value,int role){
		if (index.isValid() && role == EditRole){
			int row(index.row()),col(index.column());
			QSharedPointer<DataObject> lineItem(m_Data.at(row));
			lineItem->setProperty(m_Headers.at(col),value);
			emit dataChanged(index,index);
			return true;
		}
		return false;
	 }
	 
	验证和正则表达式
     将验证器指派给相应的输入窗件
	 void InputForm::setupForm()
	 {
		QIntValidator 	 *iValid(new QIntValidator(1,100,this));
		QDoubleValidator *dValid(new QDoubleValidator(1.0,100.0,2,this));
		m_IntEntry->setValidator(iValid);
		m_DoubleEntry->setValidator(dValid);
		connect(m_IntEntry,SIGNAL(returnPressed()),this,SLOT(computeResult()));
		connect(m_DoubleEntry,SIGNAL(returnPressed()),this,SLOT(computeResult()));
	 }
	 正则表达式验证:
	 QRegExp RinputForm::s_PhoneFormat("(\\+?1...");
	 void RinputForm::setupForm(){
		QRegExpValidator *phoneValid(new QRegExpValidator(s_PhoneFormat,this));
		m_PhoneEntry->setValidator(phoneValid);
		connect(m_PhoneEntry,SIGNAL(returnPressed()),this,SLOT(computeResult()));
	 }
	 void InputForm::computeResult()
	 {
		m_IntStr = m_IntEntry->text();
		if (s_PhoneFormat.exactMatch(m_Phone)){
		  QString areacode = s_PhoneFormat.cap(2);
		  QString exchange = s_PhoneFormat.cap(3);
		  ....
		}
	 }
	 
	 子类化QValidator:验证用户输入的需求超出了简单的数字范围或正则表达式验证的能力时。
	 eg:
	 #include <QValidator>
	 #include <QString>
	 class Palindate : public QValidator{
		Q_OBJECT
	  public:
	   explicit Palindate(QObject *parent = 0 );
	   QValidator::State validate(QString& input,int &) const;
	 };
	 QValidator::State Palindate::validate(QString &str,int &)const{
		QString inpStr(str.toLower());
		QString skipchars("-_!,;.\t ");
		foreach(QChar ch,skipchars)
		   inpStr = inpStr.remove(ch);
		QString revStr;
		for (int i = inpStr.length();i > 0; --i)
		    revStr.append(inpStr[i-1]);
		if (inpStr == revStr)
		  return Acceptable;
		else
		  return Intermediate;
	 }
     验证该验证器:
	 void PalindateForm::setupForm()
	 {
		setWindowTitle("PalindateForm Checker");
		m_LineEdit->setValidator(m_Palindate);
		connect(m_LineEdit,SIGNAL(returnPressed()),this,SLOT(showResult()));
	 }
	 void PalindateForm::showResult(){
		QString str = m_LineEdit->text();
		int pos(0);
		if (m_Palindate->validate(str,pos) == QValidator::Acceptable){
			m_InputString = str;
			m_Result->setText("Valid Palindrome!");
		}
		else {
			m_InputString = "";
			m_Result->setText("Not a Palindrome!");
		}
	 }
	 
	SAX解析只能向前处理，即顺序处理。DOM是一个可以把XML表示成导航树结构的标准API,
	DOM会把整个XML文件加载到内存中,适用于对XML文档各个部分进行随机存取而不是顺序访问的应用程序。
	SAX eg:
	 #include <QFile>
	 #include <QXmlInputSource>
	 #include <QXmlSimpleReader>
	 #include <QDebug>
	 
	 int main(int argc,char **argv)
	 {
		if (argc < 2) {qDebug() << QString("Usage:%1 <xmlfile>").arg(argv[0]); return 1;}
		MyHandler handler;//MyHandler的客户代码是Qt XML模块中的QXmlSimpleReader类
		QXmlSimpleReader reader; //通用解释器
		reader.setContentHander(&handler); //将各个对象连接在一起
		for (int i = 1; i < argc; ++i){
			QFile xmlFile(argv[i]);
			QXmlInputSource source(&xmlFile);
			reader.parse(source);  //开始解析
		}
		return 0;
	 }
	 
	 #include <QXmlDefaultHandler>
	 class QString;
	 class MyHandler:public QXmlDefaultHandler{
		public:
			//这些被动调用的函数通常称为回调函数,负责相应解析器生成的各种事件
			bool startDocument();
			bool startElement(const QString &namespaceURI,
				const QString &localName,const QString &qName,
				const QXmlAttributes &atts);
			bool characters(const QString &text);
			bool endElement(const QString &namespaceURI,
				const QString& localName,const QString &qName);
		private:
		QString indent;
	 };
	 bool MyHandler::startDocument(){
		indent = "";
		return TRUE;
	 }
	 bool MyHandler::characters(const QString& text){
		QString t = text;
		cout << t.remove('\n');
		return TRUE;
	 }
	 bool MyHandler::startElement(const QString&,const QString&,const QString& qName,
		const QXmlAttributes& atts){
		QString str = QString("\n%1\\%2).arg(indent).arg(qName);
		cout << str;
		if (atts.length() > 0){
		   QString fieldName  = atts.qName(0);
		   QString fieldValue = atts.value(0);
		   cout << QString("(%2=%3)").arg(fieldName).arg(fieldValue);
		}
		cout << "{";
		indent += "     ";
		return TRUE;
	}
	bool MyHandler::endElement(const QString&,const QString&,const QString&){
		indent.remove(0,4);
		cout << "}";
		return TRUE;
	}
	
	更好的XML API: QXmlStreamReader,QXmlStreamWriter
	eg:
	class XmlTreeModel: public QStandardItemModel{
		Q_OBJECT
	  public:
	   enum Roles {LineStartRole = Qt::UserRole + 1,LineEndRole};
	   explicit XmlTreeModel(QObject *parent = 0);
	  public slots:
	    void open(QString fileName);
	  private:
	    QXmlStreamReader m_streamReader;
		QStandardItem   *m_currentItem;
	};
	void XmlTreeModel::open(QString fileName)
	{
		QFile file(fileName);
		if (!file.open(QIODevice::ReadOnly)){
		  qDebug() << "Can't open file:" << fileName;
		  abort();
		}
		m_streamReader.setDevice(&file);
		while(!m_streamReader.atEnd()){
		   QXmlStreamReader::TokenType tt = m_streamReader.readNext();
		   switch(tt){
			 case QXmlStreamReader::StartElement: 
			 {
				String name = m_streamReader.name().toString();
				QStandardItem *item = new QStandardItem(name);
				item->setData(m_streamReader.lineNumber(),LineStartRole);
				QXmlStreamAttributes attrs = m_streamReader.attributes();
				QStringList s1;
				s1 << tr("Line# %1").arg(m_streamReader.lineNumber());
				foreach(QXmlStreamAttribute attr,attrs){
					QString line = QString("%1=%2").arg(attr.name().toString()).arg(attr.value().toString());
					s1.append(line);
				}
				item->setToolTip(s1.join("\n"));
				if (m_currentItem == 0)
				  setItem(0,0,item);
				else
				  m_currentItem->appendRow(item);
				m_currentItem = item;	
			 }
			 break;
			 case QXmlStreamReader::Characters:
			 {
				QString tt = m_currentItem->toolTip();
				tt.append("\n");
				tt.append(m_streamReader.text().toString());
				m_currentItem->setToolTip(tt);
			 }
			 break;
			 case QXmlStreamReader::EndElement:
			   m_currentItem->setData(m_streamReader.lineNumber(),LineEndRole);
			   m_currentItem = m_currentItem->parent(); //遍历树 ，why???
			   break;
			 case QXmlStreamReader::EndDocument:
			 default:
				break;
			
		   }
		}
		
	}
	
7).备忘录模式
	如果对象的内部状态被捕获且被固定以便以后能够恢复时，这就是备忘录模式的一种实现。
   eg: /* Query over QObject*/
    if (m_children){
       QList<QObject*> childlist = qFindChildren<QObject*>(obj,QString());
	   foreach(const QObject* child,childlist){
		  if (child->parent() != obj){
				//...
		  }
	   }
	}
	
some code:
connect(this,SIGNAL(finished()),this,SLOT(checkForWork()),
	Qt::QueuedConnection);
m_timer.singleShot(2000,this,SLOT(checkForWork()));
	 
...
for (int i = 0; i < m_processingMax; ++i){
	if (m_canceled) break;
	emit fetched(functor(s1[i]));
	emit progressValueChanged(i);
	qApp->processEvents(); //使得GUI能够处理事件(且信号也能被传送)
}
...
emit finished();

eg:
QMimeData() belongs to the QtCore library,where as QColor belongs to QtGui,simply use qvariant_cast():
if (event->mimeData()->hasColor()){
   QColor color = qvariant_cast<QColor>(event->mimeData()->colorData());
}
if (event->mimeData()->hasImage()){
   QImage image = qvariant_cast<QImage>(event->mimeData()->imageData());
}

第17章
1.QProcess eg:
#include <QObject>
#include <QProcess>
class Logtail:public QProcess
{
    Q_OBJECT
public:
    Logtail(QString fn = QString());
    ~Logtail();
signals:
    void logString(const QString &str);
public slots:
    void logOutput();

};
#include <QByteArray>
Logtail::Logtail(QString fn)
{
    connect(this,SIGNAL(readyReadStandardOutput()),this,SLOT(logOutput()));
    QStringList argv;

    argv << "-f" << fn;
    start("tail",argv);
}
Logtail::~Logtail()
{
    terminate();
}
void Logtail::logOutput()
{
    QByteArray bytes = readAllStandardOutput();
    QStringList lines = QString(bytes).split("\n");
    foreach(QString line,lines){
        emit logString(line);
    }
}
int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    QStringList al = a.arguments();
    QTextEdit textEdit;
    textEdit.setWindowTitle("Debug");
    textEdit.setWindowTitle("logtail demo");
    QString filename;
    if (al.size() > 1) filename = al[1];
    Logtail tail(filename);
    tail.connect(&tail,SIGNAL(logString(const QString&)),
            &textEdit,SLOT(append(const QString&)));
    textEdit.show();
    return a.exec();
}
--------------
# top -b -d 1.0 > toplog &
# ./logtail toplog

2.
#include <QMainWindow>
class QTextEdit;
class QLineEdit;
class QProcess;
class Qonsole : public QMainWindow
{
    Q_OBJECT
public:
    explicit Qonsole();
signals:

public slots:
    void execute();
    void showOutput();
private:
    QTextEdit  *m_logW;
    QLineEdit  *m_inputArea;
    QProcess   *m_shell;
};

#include "qonsole.h"
#include <QTextEdit>
#include <QLineEdit>
#include <QProcess>
#include <QDockWidget>
Qonsole::Qonsole()
{
    m_logW = new QTextEdit();
    m_logW->setReadOnly(true);
    setCentralWidget(m_logW);
    m_inputArea = new QLineEdit();
    QDockWidget *qdw = new QDockWidget("Type commands here");
    qdw->setWidget(m_inputArea);
    addDockWidget(Qt::BottomDockWidgetArea,qdw);
    connect(m_inputArea,SIGNAL(returnPressed()),
            this,SLOT(execute()));
    m_shell = new QProcess(this);
    m_shell->setReadChannelMode(QProcess::MergedChannels); //将stdout和stderr合二为一
    connect(m_shell,SIGNAL(readyReadStandardOutput()),
            this,SLOT(showOutput()));
    m_shell->start("bash",QStringList("-i"),QIODevice::ReadWrite); //以交互方式运行bash
}
void Qonsole::showOutput()
{
    QByteArray bytes = m_shell->readAllStandardOutput();
    QStringList lines = QString(bytes).split("\n");
    foreach(QString line,lines){
        m_logW->append(line);
    }
}
void Qonsole::execute()
{
    QString cmdStr = m_inputArea->text() + "\n";
    m_inputArea->setText("");
    m_logW->append(cmdStr);
    QByteArray bytes = cmdStr.toUtf8();
    m_shell->write(bytes);
}
#include <QApplication>
#include "qonsole.h"

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    Qonsole qon;
    qon.show();
    return a.exec();
}

3.QThread和QtConcurrent
 1). 除了主线程以外，不要从其他任何线程访问图形用户界面(这也包括那些由QWidget派生的类，
	QPixmap和其他与显卡相关的类),包括读、取操作，比如查询QLineEdit中输入的文本。
 2). 要在其他线程中处理图形，使用QImage而不是QPixmap
 3).不要调用QDialog::exec()或者从除主线程之外的任何线程创建QWidget或QIODevice的子类。
 4).使用QMutex，QReadWriteLock或者QSemaphore以禁止多个线程同时访问临界变量。
 5).在一个拥有多个return语句的函数中使用QMutextLocaker(或者QReadLocker,QWriteLocker)以确保函数从
    任意可能的执行路径均可释放锁。  
 6).创建QObject的线程,也称线程关联(thread affinity),负责执行那个QObject的槽.
 7).如果各QObject具有不同的线程关联,那么就不能以父-子关系连连接它们。
 8).通过从run()函数直接或者间接地调用QThread::exec()，可以让线程进入事件循环。
 9).利用QApplication::postEvent()分发事件，或使用队列式的信号/槽连接，都是用于线程间通信的安全机制，
    但需要接收线程处于事件循环中。
 10).确保每个跨线程连接的参数类型都用qRegisterMetaType()注册过。
	
4.线程安全和QObject
 1).可重入函数:一个可以由多个线程同时调用的函数，其中任意的两次调用都不会试图访问相同的数据。
如果一个类的所有非静态函数都是可重入的或者是线程安全的，那么它就是可重入的或者是线程安全的。
 2).一个QObject在它所属于或者关联的线程中被创建，其各个子对象也必须属于同一线程，Qt禁止存在跨线程的父子关系。
    QObject::thread():返回它的所有者线程，或者其关联线程
	QObject::moveToThread():可将其移动到另一个线程。
 3).QThread:本质是一个QObject，调用QThread::start()才创建线程，是一个底层线程API的封装器。
 4).线程安全的对象:可以由多个线程同时访问并且可确保处于"有效"状态的对象。默认情况下，QObject不是线程安全的
    为了让一个对象线程安全:
	1)).QMutex用于保证互斥和QMutexLocker一起使用:它运行一个单独的线程T锁住一个对象或者一段代码，使其在线程T
	    解锁之前不能被其他的线程访问。
    2)).QWaitCondition与QMutex结合使用,把线程置于一种不忙的阻塞状态，这种状态下可让其等待另一个线程将其唤醒。
	3)).QSemaphore是一个广义的QMutex，用在一个线程开始工作前需要锁住不止一个资源的各种情况下，信号量使其能保证
	    线程仅在要进行工作所需的资源全部满足的情况下才锁住资源。
5.并行算法的效率取决于让所有核都忙着做计算，而不是等待对方的同步，相对越多的时间是花费在同步方面，
随着线程增加得更多，算法的性能会变得越差。

第18章 SQL
1.某些情况下，Qt的SQL驱动程序可能不支持服务端的预处理查询，但仍然可以使用客户的转义
字符进行预处理查询。预处理语句可以让你免受SQL注入攻击和其他可能出现的解析错误，且
比每次执行都需要解析的常规查询更快一些。
  
第19章 类型和表达式
1.长的复合条件语句和switch语句应避免在面向对象编程中使用(除非只位于工厂代码中)，如果每一个case都
能被重写为不同类的方法，则可以使用策略模式(以及虚表),而不必编写switch语句。
2.ANSI C++安全类型转换
  1).static_cast<type>(expr)      用于相关类型(枚举转换成整形、浮点转换成整形...)之间的转换
  2).const_cast<type>(expr)	      用于转换掉const(常量性)或者volatile(易变性)
  3).dynamic_cast<type>(expr)     用于在继承层次中安全地导航
  4).reinterpret_cast<type>(expr) 用于不相关类型之间指针的类型转换
const_cast只用在const引用和指向非const对象的指针上。用const_cast改变const对象的结果是未定义的，
因为const对象可能被保存在只读内存中(操作系统会保护只读内存)。
eg1: const int N = 22; int *pN = const_cast<int*>(&N); *pN = 33;
使用了const_cast来获得一个const int的常规指针，由于const int位于栈存储类中，试图改变它的内存不会导致段错误。
如果const int N = 22;是全局变量，则会报段错误。

eg2:
#include <iostream>
using namespace std;
//  const int N = 22; 
void f1(const int *a){
  int *b = const_cast<int*>(a);
  (*b)++; 
  cout << "b:" <<  (*b) << ",a:" << (*a) << endl;
}
int main(){ 
  const int N = 22; 
  int *pN = const_cast<int*>(&N);
  *pN  = 33;
  cout << N << '\t' << &N << endl;
  cout << *pN << '\t' << pN << endl; 
  int a = 5;
  f1(&a);  // 6,6,a = 6;
  cout << "\n"; 
  const int b = 5;
  f1(&b); //6,6,b = 5
  cout << "b：" << b << endl;
}
void f1(const int *a){int *b = const_cast<int*>(a); (*b)++;}
//假设a是一个非const，然后试图改变它，存在2种情况 ，#1 int a; f1(&a); #2 const int b;f1(&b);
a是一个非常量，被函数f1改变，b是真常量，所有b调用f1函数后没有改变。

eg3:
#include <iostream>
void f2(int& n)
{
  ++n;
}

void f1(const int& n ,int m)
{
  if (n < m)
     f2(const_cast<int&>(n));
}

int main()
{
   int num1(10),num2(20);
   f1(num1,num2);
   std::cout << "num1:" << num1 << std::endl;
   std::cout << "num2:" << num2 << std::endl;
}
eg4:
#include <iostream>
using namespace std;
class Snafu
{
public:
    Snafu(int x):m_data(x){}
    void showSum(Snafu &other) const{ // add const
        cout << m_data + other.m_data << endl;
    }
private:
    int m_data;
};
void foo(const Snafu& myObject1,const Snafu& myObject2)
{
    myObject1.showSum(const_cast<Snafu&>(myObject2)); //const_cast<Snafu&>
}
int main()
{
    Snafu myObject1(12345);
    Snafu myObject2(54321);
    foo(myObject1,myObject2);
    return 0;
}

reinterpret_cast被用于表示相关或与系统相关的转型中，这类例子包括不相关类型之间的转换(int到指针),或
不相关指针类型之间的转换(int* 到 double*)它不能转换掉常量性，它是危险且不可移植的应避免使用。
它的真正用途:C函数有时会返回一个void*指针,指向开发人员已知的某种类型，这种情况下有必要用类型转换将
void* 转换成实际类型。对于这种转型，编译器不会进行类型检验，运行时系统也不会检验。

3.explicit 转换构造函数
class String{
  String(); //create an empty string of length 0
  String(const char* str); //converts a char array to a string
  explicit String(int n); //create length n string,filled with spaces
}
String str1,str2;
str1 = "A"; //ok: 'A' and null
str2 = 'A'; //ok: 'A'
如果移除explicit，str2将成为一个长度为65的String对象,其值为空。'A'被提升为int值65，就会隐式调用第三个构造
函数

4.转换运算符
eg:
#include <QString>
#include <QTextStream>
QTextStream  cout(stdout);
class Fraction
{
public:
    Fraction(int n,int d = 1)
      :m_Numberator(n),m_Denominator(d){}  //转换构造函数
    operator double() const{ //转换运算符
        return (double) m_Numberator / m_Denominator;
    }
    operator QString() const{
        return QString("%1/%2").arg(m_Numberator).arg(m_Denominator);
    }
private:
    int m_Numberator,m_Denominator;
};
QTextStream& operator<< (QTextStream& os,const Fraction& f)
{
    os << static_cast<QString>(f);
    return os;
}
int main(int argc, char *argv[])
{
    Fraction frac(1,3);
    Fraction frac2(4);
    double   d  = frac; //调用转换运算符
    QString  fs = frac; //调用另一个转换运算符
    cout << "fs = " << fs << "  d=" << d << endl;  // 1/3,0.3333
    cout << frac << endl;  // 1/3
    cout << frac2 << endl; // 4/1
    return 0;
}

5.运行时类型识别:dynamic_cast,typeid

6.存储类:创建对象被分配的空间位置
1)静态区域:全局变量、静态局部变量、静态数据成员.加载它的对象模块开始到程序终止时结束.
2)程序栈:函数参数、局部变量、返回值、其他的临时对象
3)堆存储或自由存储:new,delete
4)C语言遗留的寄存器:位于CPU中通过使用关键字register请求,大多编译器忽略此关键字而将其置于优先级更高的
栈中，不能用&获取地址。

全局变量和const: const全局变量的作用域与常规的全局变量的作用域不同。
默认被声明为const的全局对象具有文件作用域,如果声明为extern类型则可扩展到其他的文件中

6.构造函数或者析构函数中不存在虚方法
class Account;
class Bank{
 public:
   Bank& operator<< (Account* acct); //将对象指针添加到m_Accounts中
   ~Bank();
   QString getAcctListing() const;
private:
   QList<Account*> m_Accounts;
};
Bank::~Bank(){
  qDeleteAll(m_Accounts);
  m_Accounts.clear();
}
Bank& Bank::operator<< (Account* acct){
  m_Accounts << acct;
  return *this;
}
QString Bank::getAcctListing() const {
  QString listing("\n");
  foreach(Account* acct,m_Accounts)
    listing += QString("%1\n").arg(acct->getName());
  return listing;
}

7.查找内存错误
  Valgrind:内存泄漏,堆内存的非法指针使用

8.编译qt花费较多时间，可根据处理器的核数:make -j 4，同时运行四个编译进程。